//* ##### INSTRUCTIONS #####

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.

//* ##### EXAMPLES #####

// fiboEvenSum(10) should return a number.
// Waiting:Your function should return an even value.
// Waiting:Your function should sum the even-valued Fibonacci numbers: fiboEvenSum(8) should return 10.
// Waiting:fiboEvenSum(10) should return 10.
// Waiting:fiboEvenSum(34) should return 44.
// Waiting:fiboEvenSum(60) should return 44.
// Waiting:fiboEvenSum(1000) should return 798.
// Waiting:fiboEvenSum(100000) should return 60696.
// Waiting:fiboEvenSum(4000000) should return 4613732.

function fiboEvenSum(n) {
  const sequence = [0, 1];
  let sum = 0;
  let current = sequence[0];
  let next = sequence[1];
  while (current + next <= n) {
    sequence.push(current + next);
    current = next;
    next = sequence[sequence.length - 1];
  }
  sequence.forEach(n => {
    if (!(n % 2)) sum += n;
  });
  return sum;
}

fiboEvenSum(34);
